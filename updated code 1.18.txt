package Robot;

// Code based on http://team9960.org/mecanum-drive-prototype-1-manual-drive-software/

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import org.firstinspires.ftc.robotcore.external.navigation.Position;
import org.firstinspires.ftc.robotcore.external.Event;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.HardwareMap;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;

// This program provides 2 gamepad control for the robot
// GAMEPAD1 Controls the wheels
//          left joystick front and back movement
//          right joystick controls goes direction (spinning)
//          controls the elevator, boom, and claw
// GAMEPAD2 Controls the elevator, claw, and boom
//          DPAD Up/Down - elevator
//          left and right bumbers - claw
//          x and y - boom in and out
 
// Useful Link for Servos:  https://stemrobotics.cs.pdx.edu/node/4742
// OpMode Class definition: http://ftckey.com/apis/ftc/com/qualcomm/robotcore/eventloop/opmode/OpMode.html


// Opmode is manual

@TeleOp(name="Mecanum Proto Manual", group="Linear Opmode") 
// @Disabled

public class Wheels extends LinearOpMode { // Wheels Start

     /* Declare OpMode members. */
     private ElapsedTime runtime = new ElapsedTime();
     DcMotor leftFrontMotor = null;
     DcMotor rightFrontMotor = null;
     DcMotor leftRearMotor = null;
     DcMotor rightRearMotor = null;
     DcMotor BoomMotor = null;
     Servo   ClawServo = null;
     Servo   ElevatorServo = null;
     
     // declare motor speed variables
     double RF;                         // motor speed right front
     double LF;                         // motor speed left front
     double RR;                         // motor speed right rear
     double LR;                         // motor speed left rear
     double Event_Wheel_Right_X;        // joystick position right x
     double Event_Wheel_Right_Y;        // joystick position right y
     double Event_Wheel_Left_X;         // joystick position left x
     double Event_Wheel_Left_Y;         // joystick position left y
     double joyScale = 0.5;             // joyscale constrant
     double motorMax = 1.5;             // Limit motor power to this value for Andymark RUN_USING_ENCODER mode
     double  SERVO_JUMP = 0.1;          // positional increment for servo movement

//     double tgtPower = 0;
     double  clawPosition;              // current position of Claw
     double  elevatorPosition;          // current position of Elevator
     double  boomPosition;              // current position of Boom

//   Constants
     double  MAX_CLAW_POSITION = .75;
     double  MIN_CLAW_POSITION = .25;
     double  MAX_ELEVATOR_POSITION = 1;
     double  MIN_ELEVATOR_POSITION = .65;
     double  MAX_BOOM_POSITION = 1000;
     double  MIN_BOOM_POSITION = 0;
     int     BOOM_FORWARD_JUMP = 500;       // positional increment going forward
     int     BOOM_REVERSE_JUMP = 500;      // positional increment going in reverse
     
     @Override
     public void runOpMode() {  // RunOpMode Start

     telemetry.addData("Status", "Initialized");
     telemetry.update();

         /* Initialize the hardware variables. Note that the strings used here as parameters
         * to 'get' must correspond to the names assigned during the robot configuration
         * step (using the FTC Robot Controller app on the phone).
         */
         leftFrontMotor = hardwareMap.dcMotor.get("leftFront");
         rightFrontMotor = hardwareMap.dcMotor.get("rightFront");
         leftRearMotor = hardwareMap.dcMotor.get("leftRear");
         rightRearMotor = hardwareMap.dcMotor.get("rightRear");
         BoomMotor = hardwareMap.dcMotor.get("Boom");
         ClawServo = hardwareMap.servo.get("clawServo");
         ElevatorServo = hardwareMap.servo.get("elevatorServo");

         // Set the drive motor direction:
         // "Reverse" the motor that runs backwards when connected directly to the battery
         // These polarities are for the Neverest 20 motors
         leftFrontMotor.setDirection(DcMotor.Direction.REVERSE);
         rightFrontMotor.setDirection(DcMotor.Direction.FORWARD);
         leftRearMotor.setDirection(DcMotor.Direction.REVERSE);
         rightRearMotor.setDirection(DcMotor.Direction.FORWARD);
         BoomMotor.setDirection(DcMotor.Direction.FORWARD);
    
         // Set the drive motor run modes:
         // "RUN_USING_ENCODER" causes the motor to try to run at the specified fraction of full velocity
         // Note: We were not able to make this run mode work until we switched Channel A and B encoder wiring into
         // the motor controllers. (Neverest Channel A connects to MR Channel B input, and vice versa.)
         leftFrontMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
         rightFrontMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
         leftRearMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
         rightRearMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
       //  BoomMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
         BoomMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

         // Wait for the game to start (driver presses PLAY)
         waitForStart();
         runtime.reset();

         // Set the initial settings for starting positions of the servo and motor
         clawPosition = MIN_CLAW_POSITION;            // set Claw to closed
         elevatorPosition = MIN_ELEVATOR_POSITION;    // set Elevator to full open
         boomPosition = MIN_BOOM_POSITION;            // set Boom to all the way in
     
 //        ClawServo.setPosition(Range.clip(clawPosition, MIN_CLAW_POSITION, MAX_CLAW_POSITION));
 //        ElevatorServo.setPosition(Range.clip(elevatorPosition, MAX_ELEVATOR_POSITION, MAX_ELEVATOR_POSITION));

         // run until the end of the match (driver presses STOP)
         while (opModeIsActive()) { // OpModeIsActive Start

             // Code Common to both controllers

             telemetry.addData("Status", "Run Time: " + runtime.toString());
             telemetry.update();

             // *************************************************************************
             // GamePad 1 is the wheel gamepad
             // *************************************************************************
             
             // Reset speed variables
             LF = 0; RF = 0; LR = 0; RR = 0;
             
             // The following variables represent diffent events on the controller.
             // If you want to change use different buttons, see the following documentation.
             // http://ftckey.com/apis/ftc/index.html?com/qualcomm/robotcore/hardware/Gamepad.html
             
             // Get joystick values
             Event_Wheel_Left_Y = -gamepad1.right_stick_y * joyScale; // invert so up is positive
             Event_Wheel_Left_X = gamepad1.right_stick_x * joyScale;
             Event_Wheel_Right_Y = -gamepad1.left_stick_y * joyScale; // Event_Wheel_Left_Y is not used at present
             Event_Wheel_Right_X = gamepad1.left_stick_x * joyScale;

             // Forward/back movement
             LF += Event_Wheel_Right_Y; RF += Event_Wheel_Right_Y; LR += Event_Wheel_Right_Y; RR += Event_Wheel_Right_Y;

             // Side to side movement
             LF += Event_Wheel_Right_X; RF -= Event_Wheel_Right_X; LR -= Event_Wheel_Right_X; RR += Event_Wheel_Right_X;

             // Rotation movement
             LF += Event_Wheel_Left_X; RF -= Event_Wheel_Left_X; LR += Event_Wheel_Left_X; RR -= Event_Wheel_Left_X;

             // Clip motor power values to +-motorMax
             LF = Math.max(-motorMax, Math.min(LF, motorMax));
             RF = Math.max(-motorMax, Math.min(RF, motorMax));
             LR = Math.max(-motorMax, Math.min(LR, motorMax));
             RR = Math.max(-motorMax, Math.min(RR, motorMax));

             // Send values to the motors
             leftFrontMotor.setPower(LF);
             rightFrontMotor.setPower(RF);
             leftRearMotor.setPower(LR);
             rightRearMotor.setPower(RR);

             // *************************************************************************
             // GamePad 2 is the driver gamepad to control elevator, boom, and claw
             // *************************************************************************
             
             // Based on an event on the controller, increment or decrement elevator position and execute command to set it.
             if (gamepad2.dpad_down && elevatorPosition < MAX_ELEVATOR_POSITION)
             {  
                elevatorPosition += SERVO_JUMP;
               // elevatorPosition =.7;
               ElevatorServo.setPosition(Range.clip(elevatorPosition, MIN_ELEVATOR_POSITION, MAX_ELEVATOR_POSITION));
             }

             if (gamepad2.dpad_up && elevatorPosition > MIN_ELEVATOR_POSITION)
             {  
                elevatorPosition -= SERVO_JUMP;
               // elevatorPosition =.4;
                telemetry.addData("RightElev", "%.3f", elevatorPosition);
              ElevatorServo.setPosition(Range.clip(elevatorPosition, MIN_ELEVATOR_POSITION, MAX_ELEVATOR_POSITION));
             }

             // Based on an event on the controller, increment or decrement claw position.
             if (gamepad2.left_bumper && clawPosition < MAX_CLAW_POSITION)
             {  
                clawPosition += SERVO_JUMP;
                telemetry.addData("LeftClaw", "%.3f", clawPosition);
               ClawServo.setPosition(Range.clip(clawPosition, MIN_CLAW_POSITION, MAX_CLAW_POSITION));
             }

             if (gamepad2.right_bumper && clawPosition > MIN_CLAW_POSITION)
             {  
                clawPosition -= SERVO_JUMP;
                telemetry.addData("RightClaw", "%.3f", clawPosition);
               ClawServo.setPosition(Range.clip(clawPosition, MIN_CLAW_POSITION, MAX_CLAW_POSITION));
             }

             // Based on an event on the controller, move the boom forward as long as it has not reached the max
//             if ((gamepad2.x) && boomPosition < MAX_BOOM_POSITION)
             if (gamepad2.x)
             {
                BoomMotor.setDirection(DcMotor.Direction.FORWARD);
                BoomMotor.setPower(0.25);
                BoomMotor.setTargetPosition(BOOM_FORWARD_JUMP);
                boomPosition += BOOM_FORWARD_JUMP;
                BoomMotor.setPower(0.0);
             }

             // Based on an event on the controller, move the boom backwards as long as it has not reached the min
             //if ((gamepad2.y) && boomPosition > MIN_BOOM_POSITION)
             if (gamepad2.y)
             {
                 BoomMotor.setDirection(DcMotor.Direction.REVERSE);
                 BoomMotor.setPower(0.25);
                 BoomMotor.setTargetPosition(BOOM_REVERSE_JUMP);
                 boomPosition -= BOOM_FORWARD_JUMP;
                 BoomMotor.setPower(0.0);
                 
             }

             // *************************************************************************
             //  Send Status to screen
             // *************************************************************************
             
             // Send some useful parameters to the driver station
             telemetry.addData("Left Front", "%.3f", LF);
             telemetry.addData("Right Front", "%.3f", RF);
             telemetry.addData("Left Rear", "%.3f", LR);
             telemetry.addData("Right Rear", "%.3f", RR);
             telemetry.addData("Elevator", "%.3f", elevatorPosition);
             telemetry.addData("Claw", "%.3f", clawPosition);
             telemetry.addData("Boom", "%.3f", boomPosition);

         } // OpModeIsActive End
     } // RunOpMode End
} // Wheels End