package Robot;

// Code based on http://team9960.org/mecanum-drive-prototype-1-manual-drive-software/

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import org.firstinspires.ftc.robotcore.external.Event;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.HardwareMap;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;

/**
 * Team 9960 Revision 161027.0
 * This program provides driver station control of the Team 9960 Mecanum Drive Prototype.
 *
 * This robot uses four VEX Mecanum wheels, each direct driven by Neverest 20 motors.
 * It is designed as a linear op mode, and uses RUN_WITH_ENCODER motor operation.
 *
 * The gamepad1 right joystick is used for translation movement, while the left joystick x-axis controls rotation.
 *
 */
 
 //https://stemrobotics.cs.pdx.edu/node/4742

@TeleOp(name="Mecanum Proto Manual", group="Linear Opmode") // @Autonomous(...) is the other common choice
// @Disabled
public class Wheels extends LinearOpMode { //Main Loop1

     /* Declare OpMode members. */
     private ElapsedTime runtime = new ElapsedTime();
     DcMotor leftFrontMotor = null;
     DcMotor rightFrontMotor = null;
     DcMotor leftRearMotor = null;
     DcMotor rightRearMotor = null;
     DcMotor BoomMotor = null;
     Servo   ClawServo = null;
     Servo   ElevatorServo = null;
     
     // declare motor speed variables
     double RF; double LF; double RR; double LR;
     // declare joystick position variables
     double Event_Wheel_Right_X; double Event_Wheel_Right_Y; double Event_Wheel_Left_X; double Event_Wheel_Left_Y;
     double Event_Boom;
     // operational constants
     double joyScale = 0.5;
     double motorMax = 0.6; // Limit motor power to this value for Andymark RUN_USING_ENCODER mode
     // claw
     double tgtPower = 0;
     double  clawPosition, elevatorPosition, boomPosition;
     double  MAX_CLAW_POSITION = .75;
     double  MIN_CLAW_POSITION = .25;
     double  MAX_ELEVATOR_POSITION = 1;
     double  MIN_ELEVATOR_POSITION = .65;
     
     
     @Override
     public void runOpMode() { //runOpMode
     telemetry.addData("Status", "Initialized");
     telemetry.update();

         /* Initialize the hardware variables. Note that the strings used here as parameters
         * to 'get' must correspond to the names assigned during the robot configuration
         * step (using the FTC Robot Controller app on the phone).
         */
         leftFrontMotor = hardwareMap.dcMotor.get("leftFront");
         rightFrontMotor = hardwareMap.dcMotor.get("rightFront");
         leftRearMotor = hardwareMap.dcMotor.get("leftRear");
         rightRearMotor = hardwareMap.dcMotor.get("rightRear");
         BoomMotor = hardwareMap.dcMotor.get("Boom");
         ClawServo = hardwareMap.servo.get("clawServo");
         ElevatorServo = hardwareMap.servo.get("elevatorServo");

         // Set the drive motor direction:
         // "Reverse" the motor that runs backwards when connected directly to the battery
         // These polarities are for the Neverest 20 motors
         leftFrontMotor.setDirection(DcMotor.Direction.REVERSE);
         rightFrontMotor.setDirection(DcMotor.Direction.FORWARD);
         leftRearMotor.setDirection(DcMotor.Direction.REVERSE);
         rightRearMotor.setDirection(DcMotor.Direction.FORWARD);
         BoomMotor.setDirection(DcMotor.Direction.FORWARD);
         // Set the drive motor run modes:
         // "RUN_USING_ENCODER" causes the motor to try to run at the specified fraction of full velocity
         // Note: We were not able to make this run mode work until we switched Channel A and B encoder wiring into
         // the motor controllers. (Neverest Channel A connects to MR Channel B input, and vice versa.)
         leftFrontMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
         rightFrontMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
         leftRearMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
         rightRearMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
         BoomMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);

       BoomMotor.setPower(0.25);
 BoomMotor.setTargetPosition(5000);
        BoomMotor.setPower(0.0);
       
       
         // Wait for the game to start (driver presses PLAY)
         waitForStart();
         runtime.reset();

         // Set the initial settings for the Claw and Elevator
         clawPosition = MAX_CLAW_POSITION;            // set claw to closed
         elevatorPosition = MIN_ELEVATOR_POSITION;        // set elevator to full open.

         ClawServo.setPosition(Range.clip(clawPosition, MIN_CLAW_POSITION, MAX_CLAW_POSITION));
         ElevatorServo.setPosition(Range.clip(elevatorPosition, MIN_ELEVATOR_POSITION, MAX_ELEVATOR_POSITION));


         // run until the end of the match (driver presses STOP)
         while (opModeIsActive()) { //Process Wheel Commands Loop3
             telemetry.addData("Status", "Run Time: " + runtime.toString());
             telemetry.update();

             // Reset speed variables
             LF = 0; RF = 0; LR = 0; RR = 0;
             
             // The following variables represent diffent events on the controller.
             // If you want to change use different buttons, see the following documentation.
             // http://ftckey.com/apis/ftc/index.html?com/qualcomm/robotcore/hardware/Gamepad.html
             
             // Get joystick values
             Event_Wheel_Left_Y = -gamepad1.right_stick_y * joyScale; // invert so up is positive
             Event_Wheel_Left_X = gamepad1.right_stick_x * joyScale;
             Event_Wheel_Right_Y = -gamepad1.left_stick_y * joyScale; // Event_Wheel_Left_Y is not used at present
             Event_Wheel_Right_X = gamepad1.left_stick_x * joyScale;

             // Forward/back movement
             LF += Event_Wheel_Right_Y; RF += Event_Wheel_Right_Y; LR += Event_Wheel_Right_Y; RR += Event_Wheel_Right_Y;

             // Side to side movement
             LF += Event_Wheel_Right_X; RF -= Event_Wheel_Right_X; LR -= Event_Wheel_Right_X; RR += Event_Wheel_Right_X;

             // Rotation movement
             LF += Event_Wheel_Left_X; RF -= Event_Wheel_Left_X; LR += Event_Wheel_Left_X; RR -= Event_Wheel_Left_X;

             // Clip motor power values to +-motorMax
             LF = Math.max(-motorMax, Math.min(LF, motorMax));
             RF = Math.max(-motorMax, Math.min(RF, motorMax));
             LR = Math.max(-motorMax, Math.min(LR, motorMax));
             RR = Math.max(-motorMax, Math.min(RR, motorMax));

             // Send values to the motors
             leftFrontMotor.setPower(LF);
             rightFrontMotor.setPower(RF);
             leftRearMotor.setPower(LR);
             rightRearMotor.setPower(RR);
             Event_Boom_In.setPower(.5);
             Event_Boom_Out.setPower(-0.5);


//             Event_Elevator_Down = gamepad1.dpad_down;
//             Event_Elevator_Up = gamepad1.dpad_up;
//             Event_Claw_Close = gamepad1.right_bumper;
//             Event_Claw_Open = gamepad1.left_bumper;
//             Event_Boom_In = gamepad1.x;
//             Event_Boom_Out = gamepad1.y;


             // Based on an event on the controller, set the elevator and claw positions up or down
             if (gamepad1.dpad_up && elevatorPosition < MAX_ELEVATOR_POSITION) elevatorPosition += .01;
             if (gamepad1.dpad_down && elevatorPosition > MIN_ELEVATOR_POSITION) elevatorPosition -= .01;

             if (gamepad1.left_bumper && clawPosition < MAX_CLAW_POSITION) clawPosition += .01;
             if (gamepad1.right_bumper && clawPosition > MIN_CLAW_POSITION) clawPosition -= .01;

             if (gamepad1.x)
             {
                BoomMotor.setPower(0.25);
                   BoomMotor.setTargetPosition(50);
                 BoomMotor.setPower(0.0);
                 
             }


             if (gamepad1.y)
             {
                BoomMotor.setPower(0.25);
                   BoomMotor.setTargetPosition(150);
                 BoomMotor.setPower(0.0);
                 
             }
             // Invoke commands to set the calculated positions

             ClawServo.setPosition(Range.clip(clawPosition, MAX_CLAW_POSITION, MIN_CLAW_POSITION));
             ElevatorServo.setPosition(Range.clip(elevatorPosition, MAX_ELEVATOR_POSITION, MIN_ELEVATOR_POSITION));

             // Send some useful parameters to the driver station
             telemetry.addData("LF", "%.3f", LF);
             telemetry.addData("RF", "%.3f", RF);
             telemetry.addData("LR", "%.3f", LR);
             telemetry.addData("RR", "%.3f", RR);
             telemetry.addData("Elev", "%.3f", elevatorPosition);
             telemetry.addData("Claw", "%.3f", clawPosition);

         }//Process Wheel Commands Loop3
     }//runOpMode
} //Main Loop1

 